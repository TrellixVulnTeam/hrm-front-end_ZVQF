{"version":3,"file":"ngx-lottie.js","sources":["../../../../libs/ngx-lottie/src/lib/symbols.ts","../../../../libs/ngx-lottie/src/lib/animation-loader.ts","../../../../libs/ngx-lottie/src/lib/base.directive.ts","../../../../libs/ngx-lottie/src/lib/lottie.directive.ts","../../../../libs/ngx-lottie/src/lib/lottie.component.ts","../../../../libs/ngx-lottie/src/lib/lottie.module.ts","../../../../libs/ngx-lottie/src/lib/cacheable-animation-loader/cacheable-animation-loader.ts","../../../../libs/ngx-lottie/src/lib/cacheable-animation-loader/lottie-cache.module.ts","../../../../libs/ngx-lottie/src/lib/server.ts","../../../../libs/ngx-lottie/src/lib/transfer-state.ts","../../../../libs/ngx-lottie/src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { InjectionToken } from '@angular/core';\n\nexport interface BMEnterFrameEvent {\n  currentTime: number;\n  duration: number;\n  totalTime: number;\n  type: 'enterFrame';\n}\n\nexport interface BMCompleteLoopEvent {\n  type: 'loopComplete';\n  loop: number;\n  playCount: number;\n  frameMult: number;\n}\n\nexport interface BMCompleteEvent {\n  type: 'complete';\n  duration: number;\n}\n\nexport interface BMSegmentStartEvent {\n  type: 'segmentStart';\n  firstFrame: number;\n  totalFrames: number;\n}\n\nexport interface BMDestroyEvent {\n  target: AnimationItem;\n  type: 'destroy';\n}\n\nexport interface BMRenderFrameErrorEvent {\n  type: 'renderFrameError';\n  nativeError: Error;\n  currentTime: number;\n}\n\nexport interface BMConfigErrorEvent {\n  type: 'configError';\n  nativeError: Error;\n}\n\nexport type LottieEvent =\n  | BMEnterFrameEvent\n  | BMCompleteLoopEvent\n  | BMCompleteEvent\n  | BMSegmentStartEvent\n  | BMDestroyEvent\n  | BMRenderFrameErrorEvent\n  | BMConfigErrorEvent\n  | void;\n\nexport type CamelizedAnimationEventName =\n  | 'complete'\n  | 'loopComplete'\n  | 'enterFrame'\n  | 'segmentStart'\n  | 'configReady'\n  | 'dataReady'\n  | 'domLoaded'\n  | 'destroy'\n  | 'error';\n\nexport type EventsMap = { [key in CamelizedAnimationEventName]: AnimationEventName };\n\nexport type AnimationFilename = string;\nexport type AnimationEventName = import('lottie-web').AnimationEventName;\nexport type AnimationItem = import('lottie-web').AnimationItem;\nexport type LottiePlayer = typeof import('lottie-web').default;\n\n/**\n * @example\n * import player from 'lottie-web';\n * const factory = () => player;\n */\ntype LottiePlayerFactory = () => LottiePlayer;\n\n/**\n * @example\n * const factory = () => import('lottie-web');\n */\ntype LottieLoader = () => Promise<typeof import('lottie-web')>;\n\nexport type LottiePlayerFactoryOrLoader = LottiePlayerFactory | LottieLoader;\n\nexport interface LottieOptions {\n  player: LottiePlayerFactoryOrLoader;\n}\n\nexport type AnimationConfigWithData = import('lottie-web').AnimationConfigWithData;\nexport type AnimationConfigWithPath = import('lottie-web').AnimationConfigWithPath;\n\nexport type AnimationOptions = Partial<AnimationConfigWithData> | Partial<AnimationConfigWithPath>;\n\nexport const LOTTIE_OPTIONS = new InjectionToken<LottieOptions>('LottieOptions');\n","import { Injectable, NgZone, Inject } from '@angular/core';\n\nimport { Observable, from, of, animationFrameScheduler } from 'rxjs';\nimport { map, observeOn, publishReplay, refCount } from 'rxjs/operators';\n\nimport {\n  LOTTIE_OPTIONS,\n  LottiePlayer,\n  LottieOptions,\n  AnimationItem,\n  AnimationOptions,\n  AnimationConfigWithData,\n  AnimationConfigWithPath,\n  LottiePlayerFactoryOrLoader,\n} from './symbols';\n\nfunction convertPlayerOrLoaderToObservable(\n  player: LottiePlayerFactoryOrLoader,\n): Observable<LottiePlayer> {\n  const playerOrLoader = player();\n\n  if (playerOrLoader instanceof Promise) {\n    return from(playerOrLoader).pipe(\n      map(module => module.default || module),\n      publishReplay(1),\n      refCount(),\n    );\n  } else {\n    return of(playerOrLoader);\n  }\n}\n\n@Injectable()\nexport class AnimationLoader {\n  protected player$ = convertPlayerOrLoaderToObservable(this.options.player).pipe(\n    observeOn(animationFrameScheduler),\n  );\n\n  constructor(private ngZone: NgZone, @Inject(LOTTIE_OPTIONS) private options: LottieOptions) {}\n\n  loadAnimation(\n    options: AnimationConfigWithData | AnimationConfigWithPath,\n  ): Observable<AnimationItem> {\n    return this.player$.pipe(map(player => this.createAnimationItem(player, options)));\n  }\n\n  resolveOptions(\n    options: AnimationOptions | null,\n    container: HTMLElement,\n  ): AnimationConfigWithData | AnimationConfigWithPath {\n    return Object.assign(\n      {\n        container,\n        renderer: 'svg',\n        loop: true,\n        autoplay: true,\n      },\n      options,\n    );\n  }\n\n  protected createAnimationItem(\n    player: LottiePlayer,\n    options: AnimationConfigWithData | AnimationConfigWithPath,\n  ): AnimationItem {\n    return this.ngZone.runOutsideAngular(() => player.loadAnimation(options));\n  }\n}\n","import {\n  Directive,\n  Input,\n  Output,\n  Inject,\n  PLATFORM_ID,\n  OnDestroy,\n  SimpleChanges,\n  NgZone,\n} from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\nimport { Subject, BehaviorSubject, Observable, defer } from 'rxjs';\nimport { filter, switchMap, takeUntil } from 'rxjs/operators';\n\nimport {\n  AnimationOptions,\n  BMCompleteEvent,\n  BMCompleteLoopEvent,\n  BMEnterFrameEvent,\n  BMSegmentStartEvent,\n  BMDestroyEvent,\n  BMRenderFrameErrorEvent,\n  BMConfigErrorEvent,\n  AnimationItem,\n  AnimationEventName,\n} from './symbols';\nimport { AnimationLoader } from './animation-loader';\n\n@Directive({ selector: '[lottie]' })\nexport class BaseDirective implements OnDestroy {\n  @Input() options: AnimationOptions | null = null;\n\n  @Input() containerClass: string | null = null;\n\n  @Input() styles: Partial<CSSStyleDeclaration> | null = null;\n\n  /**\n   * `animationCreated` is dispatched after calling `loadAnimation`.\n   */\n  @Output() animationCreated = this.getAnimationItem();\n\n  /**\n   * `complete` is dispatched after completing the last frame.\n   */\n  @Output() complete = this.awaitAnimationItemAndStartListening<BMCompleteEvent>('complete');\n\n  /**\n   * `loopComplete` is dispatched after completing the frame loop.\n   */\n  @Output() loopComplete =\n    this.awaitAnimationItemAndStartListening<BMCompleteLoopEvent>('loopComplete');\n\n  /**\n   * `enterFrame` is dispatched after entering the new frame.\n   */\n  @Output() enterFrame = this.awaitAnimationItemAndStartListening<BMEnterFrameEvent>('enterFrame');\n\n  /**\n   * `segmentStart` is dispatched when the new segment is adjusted.\n   */\n  @Output() segmentStart =\n    this.awaitAnimationItemAndStartListening<BMSegmentStartEvent>('segmentStart');\n\n  /**\n   * Original event name is `config_ready`. `config_ready` is dispatched\n   * after the needed renderer is configured.\n   */\n  @Output() configReady = this.awaitAnimationItemAndStartListening<void>('config_ready');\n\n  /**\n   * Original event name is `data_ready`. `data_ready` is dispatched\n   * when all parts of the animation have been loaded.\n   */\n  @Output() dataReady = this.awaitAnimationItemAndStartListening<void>('data_ready');\n\n  /**\n   * Original event name is `DOMLoaded`. `DOMLoaded` is dispatched\n   * when elements have been added to the DOM.\n   */\n  @Output() domLoaded = this.awaitAnimationItemAndStartListening<void>('DOMLoaded');\n\n  /**\n   * `destroy` will be dispatched when the component gets destroyed,\n   * it's handy for releasing resources.\n   */\n  @Output() destroy = this.awaitAnimationItemAndStartListening<BMDestroyEvent>('destroy');\n\n  /**\n   * `error` will be dispatched if the Lottie player could not render\n   * some frame or parse config.\n   */\n  @Output() error =\n    this.awaitAnimationItemAndStartListening<BMRenderFrameErrorEvent | BMConfigErrorEvent>('error');\n\n  private destroy$ = new Subject<void>();\n  private loadAnimation$ = new Subject<[SimpleChanges, HTMLElement]>();\n  private animationItem$ = new BehaviorSubject<AnimationItem | null>(null);\n\n  constructor(\n    private ngZone: NgZone,\n    @Inject(PLATFORM_ID) private platformId: string,\n    private animationLoader: AnimationLoader,\n  ) {\n    this.setupLoadAnimationListener();\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroyAnimation();\n  }\n\n  protected loadAnimation(changes: SimpleChanges, container: HTMLElement): void {\n    this.loadAnimation$.next([changes, container]);\n  }\n\n  private getAnimationItem(): Observable<AnimationItem> {\n    return defer(() => this.animationItem$).pipe(\n      filter(\n        (animationItem: AnimationItem | null): animationItem is AnimationItem =>\n          animationItem !== null,\n      ),\n    );\n  }\n\n  private awaitAnimationItemAndStartListening<T>(name: AnimationEventName): Observable<T> {\n    return this.getAnimationItem().pipe(\n      switchMap(\n        animationItem =>\n          // `fromEvent` will try to call `removeEventListener` when `unsubscribe()` is invoked.\n          // The problem is that `ngOnDestroy()` is called before Angular unsubscribes from\n          // `@Output()` properties, thus `animationItem` will be `null` already, also `lottie-web`\n          // removes event listeners when calling `destroy()`.\n          new Observable<T>(observer => {\n            animationItem.addEventListener<T>(name, event => {\n              this.ngZone.runOutsideAngular(() => {\n                observer.next(event);\n              });\n            });\n          }),\n      ),\n    );\n  }\n\n  private setupLoadAnimationListener(): void {\n    this.loadAnimation$\n      .pipe(\n        filter(([changes]) => isPlatformBrowser(this.platformId) && changes.options !== undefined),\n        switchMap(([changes, container]) => {\n          this.destroyAnimation();\n          return this.animationLoader.loadAnimation(\n            this.animationLoader.resolveOptions(changes.options.currentValue, container),\n          );\n        }),\n        takeUntil(this.destroy$),\n      )\n      .subscribe(animationItem => {\n        this.animationItem$.next(animationItem);\n      });\n  }\n\n  private destroyAnimation(): void {\n    const animationItem = this.animationItem$.getValue();\n    // The `ng-lottie` component or the `lottie` directive can be destroyed\n    // before the `animationItem` is set, thus it will fail with\n    // `Cannot read property 'destroy' of null`.\n    // Potentially it can happen if the directive gets destroyed before change\n    // detection is run.\n    if (animationItem === null) {\n      return;\n    }\n\n    // `destroy()` will remove all events listeners.\n    animationItem.destroy();\n    this.animationItem$.next(null);\n  }\n}\n","import {\n  Directive,\n  Inject,\n  Self,\n  ElementRef,\n  PLATFORM_ID,\n  OnChanges,\n  SimpleChanges,\n  NgZone,\n} from '@angular/core';\n\nimport { BaseDirective } from './base.directive';\nimport { AnimationLoader } from './animation-loader';\n\n@Directive({ selector: '[lottie]' })\nexport class LottieDirective extends BaseDirective implements OnChanges {\n  constructor(\n    ngZone: NgZone,\n    @Inject(PLATFORM_ID) platformId: string,\n    @Self() private host: ElementRef<HTMLElement>,\n    animationLoader: AnimationLoader,\n  ) {\n    super(ngZone, platformId, animationLoader);\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    super.loadAnimation(changes, this.host.nativeElement);\n  }\n}\n","import {\n  Component,\n  ChangeDetectionStrategy,\n  Input,\n  Inject,\n  ElementRef,\n  ViewChild,\n  PLATFORM_ID,\n  OnChanges,\n  SimpleChanges,\n  NgZone,\n} from '@angular/core';\n\nimport { BaseDirective } from './base.directive';\nimport { AnimationLoader } from './animation-loader';\n\n@Component({\n  selector: 'ng-lottie',\n  template: `\n    <div\n      #container\n      [style.width]=\"width || '100%'\"\n      [style.height]=\"height || '100%'\"\n      [ngStyle]=\"styles\"\n      [ngClass]=\"containerClass\"\n    ></div>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LottieComponent extends BaseDirective implements OnChanges {\n  @Input() width: string | null = null;\n  @Input() height: string | null = null;\n\n  @ViewChild('container', { static: true }) container: ElementRef<HTMLElement> = null!;\n\n  constructor(\n    ngZone: NgZone,\n    @Inject(PLATFORM_ID) platformId: string,\n    animationLoader: AnimationLoader,\n  ) {\n    super(ngZone, platformId, animationLoader);\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    super.loadAnimation(changes, this.container.nativeElement);\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { BaseDirective } from './base.directive';\nimport { AnimationLoader } from './animation-loader';\nimport { LottieDirective } from './lottie.directive';\nimport { LottieComponent } from './lottie.component';\nimport { LottieOptions, LOTTIE_OPTIONS } from './symbols';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [BaseDirective, LottieDirective, LottieComponent],\n  exports: [BaseDirective, LottieDirective, LottieComponent],\n})\nexport class LottieModule {\n  static forRoot(options: LottieOptions): ModuleWithProviders<LottieModule> {\n    return {\n      ngModule: LottieModule,\n      providers: [\n        AnimationLoader,\n        {\n          provide: LOTTIE_OPTIONS,\n          useValue: options,\n        },\n      ],\n    };\n  }\n}\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { map } from 'rxjs/operators';\n\nimport { AnimationLoader } from '../animation-loader';\nimport { AnimationItem, AnimationConfigWithData, AnimationConfigWithPath } from '../symbols';\n\n@Injectable()\nexport class CacheableAnimationLoader extends AnimationLoader implements OnDestroy {\n  private cache = new Map<string, string>();\n\n  ngOnDestroy(): void {\n    this.cache.clear();\n  }\n\n  loadAnimation(options: AnimationConfigWithData | AnimationConfigWithPath) {\n    return this.player$.pipe(\n      map(player => {\n        const animationItem = this.createAnimationItem(player, this.transformOptions(options));\n        this.awaitConfigAndCache(options, animationItem);\n        return animationItem;\n      }),\n    );\n  }\n\n  private awaitConfigAndCache(\n    options: AnimationConfigWithData | AnimationConfigWithPath,\n    animationItem: AnimationItem,\n  ): void {\n    if (this.isAnimationConfigWithPath(options)) {\n      // Don't wait for the `config_ready` event if it has been cached previously.\n      if (this.cache.has(options.path!)) {\n        return;\n      }\n\n      animationItem.addEventListener('config_ready', () => {\n        // See the comments below on why we're storing the animation data as a string.\n        this.cache.set(options.path!, JSON.stringify(animationItem['animationData']));\n      });\n    }\n  }\n\n  private transformOptions(\n    options: AnimationConfigWithData | AnimationConfigWithPath,\n  ): AnimationConfigWithData | AnimationConfigWithPath {\n    if (this.isAnimationConfigWithPath(options) && this.cache.has(options.path!)) {\n      return {\n        ...options,\n        path: undefined,\n        // Caretaker note: `lottie-web` cannot re-use the `animationData` object between animations, and we\n        // have to retrieve a new object each time an animation is created.\n        // https://github.com/airbnb/lottie-web#html\n        // See comments for the `animationData` property.\n        animationData: JSON.parse(this.cache.get(options.path!)!),\n      };\n    } else {\n      return options;\n    }\n  }\n\n  private isAnimationConfigWithPath(\n    options: Record<string, unknown>,\n  ): options is AnimationConfigWithPath {\n    return typeof options.path === 'string';\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\n\nimport { AnimationLoader } from '../animation-loader';\nimport { CacheableAnimationLoader } from './cacheable-animation-loader';\n\n@NgModule()\nexport class LottieCacheModule {\n  static forRoot(): ModuleWithProviders<LottieCacheModule> {\n    return {\n      ngModule: LottieCacheModule,\n      providers: [\n        {\n          provide: AnimationLoader,\n          useClass: CacheableAnimationLoader,\n        },\n      ],\n    };\n  }\n}\n","import { AnimationFilename } from './symbols';\n\nexport function transformAnimationFilenameToKey(animation: AnimationFilename): string {\n  const [animationName] = animation.split('.json');\n  return `animation-${animationName}`;\n}\n","import { Injectable } from '@angular/core';\nimport { TransferState, makeStateKey } from '@angular/platform-browser';\n\nimport { AnimationFilename } from './symbols';\nimport { transformAnimationFilenameToKey } from './server';\n\n@Injectable({ providedIn: 'root' })\nexport class LottieTransferState {\n  constructor(private transferState: TransferState) {}\n\n  get<T>(animation: AnimationFilename): T | null {\n    const animationKey = transformAnimationFilenameToKey(animation);\n    const stateKey = makeStateKey<T>(animationKey);\n    return this.transferState.get(stateKey, null);\n  }\n}\n","/**\n * The public api for consumers of ngx-lottie\n */\nexport { LottieModule } from './lib/lottie.module';\nexport { LottieCacheModule } from './lib/cacheable-animation-loader/lottie-cache.module';\n\nexport { AnimationLoader } from './lib/animation-loader';\n\nexport { BaseDirective } from './lib/base.directive';\nexport { LottieDirective } from './lib/lottie.directive';\nexport { LottieComponent } from './lib/lottie.component';\nexport { LottieTransferState } from './lib/transfer-state';\nexport {\n  BMEnterFrameEvent,\n  BMCompleteLoopEvent,\n  BMCompleteEvent,\n  BMSegmentStartEvent,\n  BMDestroyEvent,\n  BMRenderFrameErrorEvent,\n  BMConfigErrorEvent,\n  AnimationOptions,\n  AnimationFilename,\n} from './lib/symbols';\nexport { transformAnimationFilenameToKey } from './lib/server';\n"]}