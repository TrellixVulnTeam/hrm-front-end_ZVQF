{"ast":null,"code":"import _asyncToGenerator from \"E:/front-end/hrm-front-end/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { environment } from '../../../../environments/environment.prod';\nimport { Validators } from \"@angular/forms\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/common/http\";\nimport * as i3 from \"../../notification/notification.service\";\nexport class DepartmentPageService {\n  constructor(formBuilder, httpClient, notificationService) {\n    this.formBuilder = formBuilder;\n    this.httpClient = httpClient;\n    this.notificationService = notificationService;\n    this.isEditDepartment = false;\n    this.inputSearch = \"\";\n    this.sortString = \"ASC\";\n    this.mainAttribute = \"Name\";\n    this.mainAttributes = [\"Name\"];\n    this.locations = [\"HOCHIMINH\", \"DANANG\", \"CANTHO\"];\n    this.isLoadData = false;\n    this.isOutOfData = false;\n    this.departments = [];\n    this.editId = 0;\n    this.idDepartmentNeedRemove = 0;\n    this.isShowPopupRequest = false;\n    this.isShowNotification = false;\n    this.isProcessRemove = false;\n    this.form = this.formBuilder.group({\n      editName: ['', [Validators.required]],\n      editLocation: ['']\n    });\n  }\n\n  loadData(event) {\n    this.isOutOfData = false;\n    this.departments = [];\n    this.getListDepartment(0, 25, this.inputSearch, this.mainAttribute == \"Name\" ? \"name\" : \"location\", this.sortString == \"ASC\" ? \"asc\" : \"desc\", event);\n  }\n\n  getListDepartment(min, max, search, mainAttribute, sort, event) {\n    var _this = this;\n\n    this.isLoadData = true;\n    document.getElementById(\"content-list\").scrollTop = 99999999;\n    setTimeout(() => {\n      this.getListDepartmentFromAPI(min, max, search, mainAttribute, sort).subscribe( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (data) {\n          if (event == 1) {\n            _this.departments = [];\n          }\n\n          for (let i = 0; i < data.data.length; i++) {\n            yield _this.getEmployeeByIdDepartment(data.data[i].id).subscribe(dataGetEmployee => {\n              let member = 0;\n\n              if (dataGetEmployee.message != 'Not Found Departmant') {\n                member = dataGetEmployee.data.length;\n              }\n\n              let department = {\n                id: data.data[i].id,\n                location: data.data[i].location,\n                member: member,\n                name: data.data[i].name\n              };\n\n              _this.departments.push(department);\n            });\n          }\n\n          if (data.data.length < max || data.data.length == 0) {\n            _this.isOutOfData = true;\n          }\n\n          _this.isLoadData = false;\n        });\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    }, 1000);\n  }\n\n  getListDepartmentFromAPI(min, max, search, mainAttribute, sort) {\n    const url = `${environment.REST_API}department/part?min=${min}&max=${max}&sort=${sort}&search=${search}&mainAttribute=${mainAttribute}`;\n    return this.httpClient.get(url);\n  }\n\n  getEmployeeByIdDepartment(id) {\n    const url = `${environment.REST_API}employee/department/${id}`;\n    return this.httpClient.get(url);\n  }\n\n  saveItem() {\n    if (this.form.valid) {\n      this.saveDepartment().subscribe(data => {\n        console.log(data);\n        this.isEditDepartment = false;\n        this.loadData(0);\n        this.isShowPopupRequest = false;\n        this.isShowNotification = true;\n        this.notificationService.titlePopUpNotificationDepartment = \"Success\";\n        this.notificationService.childPopUpNotificationDepartment = `You have successfully updated the department #${this.editId}`;\n      });\n    }\n  }\n\n  addNewDepartment(body) {\n    const url = `${environment.REST_API}department`;\n    return this.httpClient.post(url, body);\n  }\n\n  saveDepartment() {\n    const url = `${environment.REST_API}department`;\n    let body = {\n      id: this.editId,\n      name: this.form.value.editName,\n      location: this.form.value.editLocation\n    };\n    return this.httpClient.put(url, body);\n  }\n\n  deleteDepartmentById(id) {\n    const url = `${environment.REST_API}department/${id}`;\n    return this.httpClient.delete(url);\n  }\n\n}\n\nDepartmentPageService.ɵfac = function DepartmentPageService_Factory(t) {\n  return new (t || DepartmentPageService)(i0.ɵɵinject(i1.FormBuilder), i0.ɵɵinject(i2.HttpClient), i0.ɵɵinject(i3.NotificationService));\n};\n\nDepartmentPageService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: DepartmentPageService,\n  factory: DepartmentPageService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["E:/front-end/hrm-front-end/src/app/service/main-page/department-page/department-page.service.ts"],"names":["environment","Validators","i0","i1","i2","i3","DepartmentPageService","constructor","formBuilder","httpClient","notificationService","isEditDepartment","inputSearch","sortString","mainAttribute","mainAttributes","locations","isLoadData","isOutOfData","departments","editId","idDepartmentNeedRemove","isShowPopupRequest","isShowNotification","isProcessRemove","form","group","editName","required","editLocation","loadData","event","getListDepartment","min","max","search","sort","document","getElementById","scrollTop","setTimeout","getListDepartmentFromAPI","subscribe","data","i","length","getEmployeeByIdDepartment","id","dataGetEmployee","member","message","department","location","name","push","url","REST_API","get","saveItem","valid","saveDepartment","console","log","titlePopUpNotificationDepartment","childPopUpNotificationDepartment","addNewDepartment","body","post","value","put","deleteDepartmentById","delete","ɵfac","DepartmentPageService_Factory","t","ɵɵinject","FormBuilder","HttpClient","NotificationService","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":"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","sourcesContent":["import { environment } from '../../../../environments/environment.prod';\r\nimport { Validators } from \"@angular/forms\";\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/forms\";\r\nimport * as i2 from \"@angular/common/http\";\r\nimport * as i3 from \"../../notification/notification.service\";\r\nexport class DepartmentPageService {\r\n    constructor(formBuilder, httpClient, notificationService) {\r\n        this.formBuilder = formBuilder;\r\n        this.httpClient = httpClient;\r\n        this.notificationService = notificationService;\r\n        this.isEditDepartment = false;\r\n        this.inputSearch = \"\";\r\n        this.sortString = \"ASC\";\r\n        this.mainAttribute = \"Name\";\r\n        this.mainAttributes = [\r\n            \"Name\",\r\n        ];\r\n        this.locations = [\r\n            \"HOCHIMINH\",\r\n            \"DANANG\",\r\n            \"CANTHO\",\r\n        ];\r\n        this.isLoadData = false;\r\n        this.isOutOfData = false;\r\n        this.departments = [];\r\n        this.editId = 0;\r\n        this.idDepartmentNeedRemove = 0;\r\n        this.isShowPopupRequest = false;\r\n        this.isShowNotification = false;\r\n        this.isProcessRemove = false;\r\n        this.form = this.formBuilder.group({\r\n            editName: ['', [Validators.required]],\r\n            editLocation: [''],\r\n        });\r\n    }\r\n    loadData(event) {\r\n        this.isOutOfData = false;\r\n        this.departments = [];\r\n        this.getListDepartment(0, 25, this.inputSearch, this.mainAttribute == \"Name\" ? \"name\" : \"location\", this.sortString == \"ASC\" ? \"asc\" : \"desc\", event);\r\n    }\r\n    getListDepartment(min, max, search, mainAttribute, sort, event) {\r\n        this.isLoadData = true;\r\n        document.getElementById(\"content-list\").scrollTop = 99999999;\r\n        setTimeout(() => {\r\n            this.getListDepartmentFromAPI(min, max, search, mainAttribute, sort).subscribe(async (data) => {\r\n                if (event == 1) {\r\n                    this.departments = [];\r\n                }\r\n                for (let i = 0; i < data.data.length; i++) {\r\n                    await this.getEmployeeByIdDepartment(data.data[i].id).subscribe(dataGetEmployee => {\r\n                        let member = 0;\r\n                        if (dataGetEmployee.message != 'Not Found Departmant') {\r\n                            member = dataGetEmployee.data.length;\r\n                        }\r\n                        let department = {\r\n                            id: data.data[i].id,\r\n                            location: data.data[i].location,\r\n                            member: member,\r\n                            name: data.data[i].name,\r\n                        };\r\n                        this.departments.push(department);\r\n                    });\r\n                }\r\n                if (data.data.length < max || data.data.length == 0) {\r\n                    this.isOutOfData = true;\r\n                }\r\n                this.isLoadData = false;\r\n            });\r\n        }, 1000);\r\n    }\r\n    getListDepartmentFromAPI(min, max, search, mainAttribute, sort) {\r\n        const url = `${environment.REST_API}department/part?min=${min}&max=${max}&sort=${sort}&search=${search}&mainAttribute=${mainAttribute}`;\r\n        return this.httpClient.get(url);\r\n    }\r\n    getEmployeeByIdDepartment(id) {\r\n        const url = `${environment.REST_API}employee/department/${id}`;\r\n        return this.httpClient.get(url);\r\n    }\r\n    saveItem() {\r\n        if (this.form.valid) {\r\n            this.saveDepartment().subscribe(data => {\r\n                console.log(data);\r\n                this.isEditDepartment = false;\r\n                this.loadData(0);\r\n                this.isShowPopupRequest = false;\r\n                this.isShowNotification = true;\r\n                this.notificationService.titlePopUpNotificationDepartment = \"Success\";\r\n                this.notificationService.childPopUpNotificationDepartment = `You have successfully updated the department #${this.editId}`;\r\n            });\r\n        }\r\n    }\r\n    addNewDepartment(body) {\r\n        const url = `${environment.REST_API}department`;\r\n        return this.httpClient.post(url, body);\r\n    }\r\n    saveDepartment() {\r\n        const url = `${environment.REST_API}department`;\r\n        let body = {\r\n            id: this.editId,\r\n            name: this.form.value.editName,\r\n            location: this.form.value.editLocation\r\n        };\r\n        return this.httpClient.put(url, body);\r\n    }\r\n    deleteDepartmentById(id) {\r\n        const url = `${environment.REST_API}department/${id}`;\r\n        return this.httpClient.delete(url);\r\n    }\r\n}\r\nDepartmentPageService.ɵfac = function DepartmentPageService_Factory(t) { return new (t || DepartmentPageService)(i0.ɵɵinject(i1.FormBuilder), i0.ɵɵinject(i2.HttpClient), i0.ɵɵinject(i3.NotificationService)); };\r\nDepartmentPageService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: DepartmentPageService, factory: DepartmentPageService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}