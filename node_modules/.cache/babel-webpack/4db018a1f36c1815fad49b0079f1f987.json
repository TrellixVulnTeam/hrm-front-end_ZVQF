{"ast":null,"code":"import _asyncToGenerator from \"E:/front-end/hrm-front-end/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { environment } from 'src/environments/environment.prod';\nimport { Validators } from \"@angular/forms\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../../notification/notification.service\";\nimport * as i3 from \"@angular/forms\";\nexport class EmployeePageService {\n  constructor(httpClient, notificationService, formBuilder) {\n    this.httpClient = httpClient;\n    this.notificationService = notificationService;\n    this.formBuilder = formBuilder;\n    this.isEditEmployee = false;\n    this.inputSearch = \"\";\n    this.sortString = \"ASC\";\n    this.mainAttribute = \"First name\";\n    this.mainAttributes = [\"First name\", \"Last name\", \"Address\", \"City\", \"Email\"];\n    this.gender = [\"MALE\", \"FEMALE\"];\n    this.isLoadData = false;\n    this.isOutOfData = false;\n    this.employees = [];\n    this.editId = 0;\n    this.form = this.formBuilder.group({\n      editGender: [''],\n      editFirstName: ['', [Validators.required, Validators.min(5), Validators.max(50)]],\n      editLastName: ['', [Validators.required]],\n      editAddress: ['', [Validators.required]],\n      editCity: ['', [Validators.required]],\n      editEmail: ['', [Validators.required, Validators.email]],\n      editDepartmentId: [''],\n      editDoB: ['']\n    });\n    this.idEmployeeNeedRemove = 0;\n    this.isShowPopupRequest = false;\n    this.isShowNotification = false;\n    this.isProcessRemove = false;\n    this.isAddEmployee = false;\n  }\n\n  getStringMainAttribute() {\n    if (this.mainAttribute == 'Last name') {\n      return \"lastName\";\n    }\n\n    if (this.mainAttribute == 'First name') {\n      return \"firstName\";\n    }\n\n    if (this.mainAttribute == 'Address') {\n      return \"address\";\n    }\n\n    if (this.mainAttribute == 'City') {\n      return \"city\";\n    }\n\n    return \"email\";\n  }\n\n  loadData(event) {\n    this.isOutOfData = false;\n    this.employees = [];\n    this.getListEmployee(0, 25, this.inputSearch, this.getStringMainAttribute(), this.sortString == \"ASC\" ? \"asc\" : \"desc\", event);\n  }\n\n  getListEmployee(min, max, search, mainAttribute, sort, event) {\n    this.isLoadData = true;\n    document.getElementById(\"content-list-e\").scrollTop = 99999999;\n    setTimeout(() => {\n      this.getListEmployeeFromAPI(min, max, search, mainAttribute, sort).subscribe(data => {\n        if (event == 1) {\n          this.employees = [];\n        }\n\n        for (let i = 0; i < data.data.length; i++) {\n          let employee = {\n            id: data.data[i].id,\n            address: data.data[i].address,\n            city: data.data[i].city,\n            department: {\n              id: data.data[i].department.id,\n              location: data.data[i].department.location,\n              member: 0,\n              name: data.data[i].department.name\n            },\n            doB: {\n              day: data.data[i].doB[2],\n              format: this.getFormat(data.data[i].doB[2], data.data[i].doB[1], data.data[i].doB[0]),\n              month: data.data[i].doB[1],\n              year: data.data[i].doB[0]\n            },\n            email: data.data[i].email,\n            firstName: data.data[i].firstName,\n            gender: data.data[i].gender,\n            lastName: data.data[i].lastName\n          };\n          this.employees.push(employee);\n        }\n\n        if (data.data.length < max || data.data.length == 0) {\n          this.isOutOfData = true;\n        }\n\n        this.isLoadData = false;\n      });\n    }, 1000);\n  }\n\n  getFormat(day, month, year) {\n    let d = day < 10 ? \"0\" + day : day;\n    let m = month < 10 ? \"0\" + month : month;\n    return `${d}/${m}/${year}`;\n  }\n\n  addNewEmployee(body) {\n    const url = `${environment.REST_API}employee`;\n    return this.httpClient.post(url, body);\n  }\n\n  getListEmployeeFromAPI(min, max, search, mainAttribute, sort) {\n    const url = `${environment.REST_API}employee/part?min=${min}&max=${max}&sort=${sort}&search=${search}&mainAttribute=${mainAttribute}`;\n    return this.httpClient.get(url);\n  }\n\n  saveItem() {\n    if (this.form.valid) {\n      this.saveEmployee().subscribe(data => {\n        console.log(data);\n        this.isShowPopupRequest = false;\n        this.isShowNotification = true;\n\n        if (data.message == \"Exists email\") {\n          this.notificationService.titlePopUpNotificationEmployee = `Already exists staff with email: ${this.form.value.editEmail}`;\n        } else {\n          this.notificationService.titlePopUpNotificationEmployee = `You have successfully updated the employee #${this.editId}`;\n          this.isEditEmployee = false;\n          this.loadData(0);\n        }\n      });\n    }\n  }\n\n  getAllIdDepartment() {\n    const url = `${environment.REST_API}department`;\n    return this.httpClient.get(url);\n  }\n\n  deleteEmployeeById(id) {\n    const url = `${environment.REST_API}employee/${id}`;\n    return this.httpClient.delete(url);\n  }\n\n  saveEmployee() {\n    const url = `${environment.REST_API}employee/${this.editId}`;\n    console.log(url);\n    let body = {\n      address: this.form.value.editAddress,\n      city: this.form.value.editCity,\n      doB: this.form.value.editDoB.slice(0, 10),\n      email: this.form.value.editEmail,\n      firstName: this.form.value.editFirstName,\n      lastName: this.form.value.editLastName,\n      gender: this.form.value.editGender,\n      department: parseInt(this.form.value.editDepartmentId)\n    };\n    return this.httpClient.put(url, body);\n  }\n\n  validatorExistsEmail(c) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      let value = c.value.trim();\n      const url = `${environment.REST_API}employee/find?email=${value}&id=${-1}`;\n      yield _this.httpClient.get(url).subscribe(data => {\n        return data.status == 'Exists email' ? {\n          exists: true\n        } : null;\n      });\n      return null;\n    })();\n  }\n\n  validatorMinLengthFirstName(c) {\n    let value = c.value.trim();\n    return value.length < 5 ? {\n      minLength: true\n    } : null;\n  }\n\n  validatorMaxLengthFirstName(c) {\n    let value = c.value.trim();\n    return value.length > 50 ? {\n      maxLength: true\n    } : null;\n  }\n\n}\n\nEmployeePageService.ɵfac = function EmployeePageService_Factory(t) {\n  return new (t || EmployeePageService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.NotificationService), i0.ɵɵinject(i3.FormBuilder));\n};\n\nEmployeePageService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: EmployeePageService,\n  factory: EmployeePageService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["E:/front-end/hrm-front-end/src/app/service/main-page/employee-page/employee-page.service.ts"],"names":["environment","Validators","i0","i1","i2","i3","EmployeePageService","constructor","httpClient","notificationService","formBuilder","isEditEmployee","inputSearch","sortString","mainAttribute","mainAttributes","gender","isLoadData","isOutOfData","employees","editId","form","group","editGender","editFirstName","required","min","max","editLastName","editAddress","editCity","editEmail","email","editDepartmentId","editDoB","idEmployeeNeedRemove","isShowPopupRequest","isShowNotification","isProcessRemove","isAddEmployee","getStringMainAttribute","loadData","event","getListEmployee","search","sort","document","getElementById","scrollTop","setTimeout","getListEmployeeFromAPI","subscribe","data","i","length","employee","id","address","city","department","location","member","name","doB","day","format","getFormat","month","year","firstName","lastName","push","d","m","addNewEmployee","body","url","REST_API","post","get","saveItem","valid","saveEmployee","console","log","message","titlePopUpNotificationEmployee","value","getAllIdDepartment","deleteEmployeeById","delete","slice","parseInt","put","validatorExistsEmail","c","trim","status","exists","validatorMinLengthFirstName","minLength","validatorMaxLengthFirstName","maxLength","ɵfac","EmployeePageService_Factory","t","ɵɵinject","HttpClient","NotificationService","FormBuilder","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":"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","sourcesContent":["import { environment } from 'src/environments/environment.prod';\r\nimport { Validators } from \"@angular/forms\";\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/common/http\";\r\nimport * as i2 from \"../../notification/notification.service\";\r\nimport * as i3 from \"@angular/forms\";\r\nexport class EmployeePageService {\r\n    constructor(httpClient, notificationService, formBuilder) {\r\n        this.httpClient = httpClient;\r\n        this.notificationService = notificationService;\r\n        this.formBuilder = formBuilder;\r\n        this.isEditEmployee = false;\r\n        this.inputSearch = \"\";\r\n        this.sortString = \"ASC\";\r\n        this.mainAttribute = \"First name\";\r\n        this.mainAttributes = [\r\n            \"First name\",\r\n            \"Last name\",\r\n            \"Address\",\r\n            \"City\",\r\n            \"Email\",\r\n        ];\r\n        this.gender = [\r\n            \"MALE\",\r\n            \"FEMALE\",\r\n        ];\r\n        this.isLoadData = false;\r\n        this.isOutOfData = false;\r\n        this.employees = [];\r\n        this.editId = 0;\r\n        this.form = this.formBuilder.group({\r\n            editGender: ['',],\r\n            editFirstName: ['', [Validators.required, Validators.min(5), Validators.max(50)]],\r\n            editLastName: ['', [Validators.required]],\r\n            editAddress: ['', [Validators.required]],\r\n            editCity: ['', [Validators.required]],\r\n            editEmail: ['', [Validators.required, Validators.email]],\r\n            editDepartmentId: ['',],\r\n            editDoB: ['',]\r\n        });\r\n        this.idEmployeeNeedRemove = 0;\r\n        this.isShowPopupRequest = false;\r\n        this.isShowNotification = false;\r\n        this.isProcessRemove = false;\r\n        this.isAddEmployee = false;\r\n    }\r\n    getStringMainAttribute() {\r\n        if (this.mainAttribute == 'Last name') {\r\n            return \"lastName\";\r\n        }\r\n        if (this.mainAttribute == 'First name') {\r\n            return \"firstName\";\r\n        }\r\n        if (this.mainAttribute == 'Address') {\r\n            return \"address\";\r\n        }\r\n        if (this.mainAttribute == 'City') {\r\n            return \"city\";\r\n        }\r\n        return \"email\";\r\n    }\r\n    loadData(event) {\r\n        this.isOutOfData = false;\r\n        this.employees = [];\r\n        this.getListEmployee(0, 25, this.inputSearch, this.getStringMainAttribute(), this.sortString == \"ASC\" ? \"asc\" : \"desc\", event);\r\n    }\r\n    getListEmployee(min, max, search, mainAttribute, sort, event) {\r\n        this.isLoadData = true;\r\n        document.getElementById(\"content-list-e\").scrollTop = 99999999;\r\n        setTimeout(() => {\r\n            this.getListEmployeeFromAPI(min, max, search, mainAttribute, sort).subscribe(data => {\r\n                if (event == 1) {\r\n                    this.employees = [];\r\n                }\r\n                for (let i = 0; i < data.data.length; i++) {\r\n                    let employee = {\r\n                        id: data.data[i].id,\r\n                        address: data.data[i].address,\r\n                        city: data.data[i].city,\r\n                        department: {\r\n                            id: data.data[i].department.id,\r\n                            location: data.data[i].department.location,\r\n                            member: 0,\r\n                            name: data.data[i].department.name,\r\n                        },\r\n                        doB: {\r\n                            day: data.data[i].doB[2],\r\n                            format: this.getFormat(data.data[i].doB[2], data.data[i].doB[1], data.data[i].doB[0]),\r\n                            month: data.data[i].doB[1],\r\n                            year: data.data[i].doB[0],\r\n                        },\r\n                        email: data.data[i].email,\r\n                        firstName: data.data[i].firstName,\r\n                        gender: data.data[i].gender,\r\n                        lastName: data.data[i].lastName,\r\n                    };\r\n                    this.employees.push(employee);\r\n                }\r\n                if (data.data.length < max || data.data.length == 0) {\r\n                    this.isOutOfData = true;\r\n                }\r\n                this.isLoadData = false;\r\n            });\r\n        }, 1000);\r\n    }\r\n    getFormat(day, month, year) {\r\n        let d = day < 10 ? \"0\" + day : day;\r\n        let m = month < 10 ? \"0\" + month : month;\r\n        return `${d}/${m}/${year}`;\r\n    }\r\n    addNewEmployee(body) {\r\n        const url = `${environment.REST_API}employee`;\r\n        return this.httpClient.post(url, body);\r\n    }\r\n    getListEmployeeFromAPI(min, max, search, mainAttribute, sort) {\r\n        const url = `${environment.REST_API}employee/part?min=${min}&max=${max}&sort=${sort}&search=${search}&mainAttribute=${mainAttribute}`;\r\n        return this.httpClient.get(url);\r\n    }\r\n    saveItem() {\r\n        if (this.form.valid) {\r\n            this.saveEmployee().subscribe(data => {\r\n                console.log(data);\r\n                this.isShowPopupRequest = false;\r\n                this.isShowNotification = true;\r\n                if (data.message == \"Exists email\") {\r\n                    this.notificationService.titlePopUpNotificationEmployee = `Already exists staff with email: ${this.form.value.editEmail}`;\r\n                }\r\n                else {\r\n                    this.notificationService.titlePopUpNotificationEmployee = `You have successfully updated the employee #${this.editId}`;\r\n                    this.isEditEmployee = false;\r\n                    this.loadData(0);\r\n                }\r\n            });\r\n        }\r\n    }\r\n    getAllIdDepartment() {\r\n        const url = `${environment.REST_API}department`;\r\n        return this.httpClient.get(url);\r\n    }\r\n    deleteEmployeeById(id) {\r\n        const url = `${environment.REST_API}employee/${id}`;\r\n        return this.httpClient.delete(url);\r\n    }\r\n    saveEmployee() {\r\n        const url = `${environment.REST_API}employee/${this.editId}`;\r\n        console.log(url);\r\n        let body = {\r\n            address: this.form.value.editAddress,\r\n            city: this.form.value.editCity,\r\n            doB: this.form.value.editDoB.slice(0, 10),\r\n            email: this.form.value.editEmail,\r\n            firstName: this.form.value.editFirstName,\r\n            lastName: this.form.value.editLastName,\r\n            gender: this.form.value.editGender,\r\n            department: parseInt(this.form.value.editDepartmentId),\r\n        };\r\n        return this.httpClient.put(url, body);\r\n    }\r\n    async validatorExistsEmail(c) {\r\n        let value = c.value.trim();\r\n        const url = `${environment.REST_API}employee/find?email=${value}&id=${-1}`;\r\n        await this.httpClient.get(url).subscribe(data => {\r\n            return data.status == 'Exists email' ? {\r\n                exists: true\r\n            } : null;\r\n        });\r\n        return null;\r\n    }\r\n    validatorMinLengthFirstName(c) {\r\n        let value = c.value.trim();\r\n        return value.length < 5 ? {\r\n            minLength: true\r\n        } : null;\r\n    }\r\n    validatorMaxLengthFirstName(c) {\r\n        let value = c.value.trim();\r\n        return value.length > 50 ? {\r\n            maxLength: true\r\n        } : null;\r\n    }\r\n}\r\nEmployeePageService.ɵfac = function EmployeePageService_Factory(t) { return new (t || EmployeePageService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.NotificationService), i0.ɵɵinject(i3.FormBuilder)); };\r\nEmployeePageService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: EmployeePageService, factory: EmployeePageService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}