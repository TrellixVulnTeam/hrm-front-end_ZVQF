{"ast":null,"code":"import _asyncToGenerator from \"E:/front-end/hrm-front-end/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { environment } from './../../../../environments/environment.prod';\nimport { Department } from 'src/app/model/department';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./../../notification/notification.service\";\nexport class DepartmentPageService {\n  constructor(httpClient, notificationService) {\n    this.httpClient = httpClient;\n    this.notificationService = notificationService;\n    this.isEditDepartment = false;\n    this.inputSearch = \"\";\n    this.sortString = \"ASC\";\n    this.mainAttribute = \"Name\";\n    this.mainAttributes = [\"Name\"];\n    this.locations = [\"HOCHIMINH\", \"DANANG\", \"CANTHO\"];\n    this.isLoadData = false;\n    this.isOutOfData = false;\n    this.departments = [];\n    this.editName = \"\";\n    this.editLocation = \"\";\n    this.editId = 0;\n    this.idDepartmentNeedRemove = 0;\n    this.isShowPopupRequest = false;\n    this.isShowNotification = false;\n    this.isProcessRemove = false;\n  }\n\n  loadData(event) {\n    this.isOutOfData = false;\n    this.departments = [];\n    this.getListDepartment(0, 25, this.inputSearch, this.mainAttribute == \"Name\" ? \"name\" : \"location\", this.getSortString() == \"ASC\" ? \"asc\" : \"desc\", event);\n  }\n\n  getListDepartment(min, max, search, mainAttribute, sort, event) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.isLoadData = true;\n      document.getElementById(\"content-list\").scrollTop = 99999999;\n      setTimeout(() => {\n        _this.getListDepartmentFromAPI(min, max, search, mainAttribute, sort).subscribe(data => {\n          if (event == 1) {\n            _this.departments = [];\n          }\n\n          for (let i = 0; i < data.data.length; i++) {\n            let department = new Department();\n            department.id = data.data[i].id;\n            department.location = data.data[i].location;\n            department.name = data.data[i].name;\n\n            _this.departments.push(department);\n          }\n\n          if (data.data.length < max || data.data.length == 0) {\n            _this.isOutOfData = true;\n          }\n\n          _this.isLoadData = false;\n        });\n      }, 1000);\n    })();\n  }\n\n  getListDepartmentFromAPI(min, max, search, mainAttribute, sort) {\n    const url = `${environment.REST_API}department/part?min=${min}&max=${max}&sort=${sort}&search=${search}&mainAttribute=${mainAttribute}`;\n    return this.httpClient.get(url);\n  }\n\n  saveItem() {\n    if (this.editName.trim().length > 0) {\n      this.saveDepartment().subscribe(data => {\n        console.log(data);\n        this.hiddenEditDepartment();\n        this.loadData(0);\n        this.isShowPopupRequest = false;\n        this.isShowNotification = true;\n        this.notificationService.titlePopUpNotificationDepartment = \"Success\";\n        this.notificationService.childPopUpNotificationDepartment = `You have successfully updated the department #${this.editId}`;\n      });\n    }\n  }\n\n  addNewDepartment(body) {\n    const url = `${environment.REST_API}department`;\n    return this.httpClient.post(url, body);\n  }\n\n  saveDepartment() {\n    const url = `${environment.REST_API}department`;\n    let body = {\n      id: this.editId,\n      name: this.editName,\n      location: this.editLocation\n    };\n    return this.httpClient.put(url, body);\n  }\n\n  deleteDepartmentById(id) {\n    const url = `${environment.REST_API}department/${id}`;\n    return this.httpClient.delete(url);\n  }\n\n  isShowEditDepartment() {\n    return this.isEditDepartment;\n  }\n\n  showEditDepartment() {\n    this.isEditDepartment = true;\n  }\n\n  hiddenEditDepartment() {\n    this.isEditDepartment = false;\n  }\n\n  getMainAttributes() {\n    return this.mainAttributes;\n  }\n\n  getSortString() {\n    return this.sortString;\n  }\n\n  changeSort(newSort) {\n    this.sortString = newSort;\n  }\n\n}\n\nDepartmentPageService.ɵfac = function DepartmentPageService_Factory(t) {\n  return new (t || DepartmentPageService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.NotificationService));\n};\n\nDepartmentPageService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: DepartmentPageService,\n  factory: DepartmentPageService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["E:/front-end/hrm-front-end/src/app/service/main-page/department-page/department-page.service.ts"],"names":["environment","Department","i0","i1","i2","DepartmentPageService","constructor","httpClient","notificationService","isEditDepartment","inputSearch","sortString","mainAttribute","mainAttributes","locations","isLoadData","isOutOfData","departments","editName","editLocation","editId","idDepartmentNeedRemove","isShowPopupRequest","isShowNotification","isProcessRemove","loadData","event","getListDepartment","getSortString","min","max","search","sort","document","getElementById","scrollTop","setTimeout","getListDepartmentFromAPI","subscribe","data","i","length","department","id","location","name","push","url","REST_API","get","saveItem","trim","saveDepartment","console","log","hiddenEditDepartment","titlePopUpNotificationDepartment","childPopUpNotificationDepartment","addNewDepartment","body","post","put","deleteDepartmentById","delete","isShowEditDepartment","showEditDepartment","getMainAttributes","changeSort","newSort","ɵfac","DepartmentPageService_Factory","t","ɵɵinject","HttpClient","NotificationService","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":";AAAA,SAASA,WAAT,QAA4B,6CAA5B;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,sBAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,2CAApB;AACA,OAAO,MAAMC,qBAAN,CAA4B;AAC/BC,EAAAA,WAAW,CAACC,UAAD,EAAaC,mBAAb,EAAkC;AACzC,SAAKD,UAAL,GAAkBA,UAAlB;AACA,SAAKC,mBAAL,GAA2BA,mBAA3B;AACA,SAAKC,gBAAL,GAAwB,KAAxB;AACA,SAAKC,WAAL,GAAmB,EAAnB;AACA,SAAKC,UAAL,GAAkB,KAAlB;AACA,SAAKC,aAAL,GAAqB,MAArB;AACA,SAAKC,cAAL,GAAsB,CAClB,MADkB,CAAtB;AAGA,SAAKC,SAAL,GAAiB,CACb,WADa,EAEb,QAFa,EAGb,QAHa,CAAjB;AAKA,SAAKC,UAAL,GAAkB,KAAlB;AACA,SAAKC,WAAL,GAAmB,KAAnB;AACA,SAAKC,WAAL,GAAmB,EAAnB;AACA,SAAKC,QAAL,GAAgB,EAAhB;AACA,SAAKC,YAAL,GAAoB,EAApB;AACA,SAAKC,MAAL,GAAc,CAAd;AACA,SAAKC,sBAAL,GAA8B,CAA9B;AACA,SAAKC,kBAAL,GAA0B,KAA1B;AACA,SAAKC,kBAAL,GAA0B,KAA1B;AACA,SAAKC,eAAL,GAAuB,KAAvB;AACH;;AACDC,EAAAA,QAAQ,CAACC,KAAD,EAAQ;AACZ,SAAKV,WAAL,GAAmB,KAAnB;AACA,SAAKC,WAAL,GAAmB,EAAnB;AACA,SAAKU,iBAAL,CAAuB,CAAvB,EAA0B,EAA1B,EAA8B,KAAKjB,WAAnC,EAAgD,KAAKE,aAAL,IAAsB,MAAtB,GAA+B,MAA/B,GAAwC,UAAxF,EAAoG,KAAKgB,aAAL,MAAwB,KAAxB,GAAgC,KAAhC,GAAwC,MAA5I,EAAoJF,KAApJ;AACH;;AACKC,EAAAA,iBAAiB,CAACE,GAAD,EAAMC,GAAN,EAAWC,MAAX,EAAmBnB,aAAnB,EAAkCoB,IAAlC,EAAwCN,KAAxC,EAA+C;AAAA;;AAAA;AAClE,MAAA,KAAI,CAACX,UAAL,GAAkB,IAAlB;AACAkB,MAAAA,QAAQ,CAACC,cAAT,CAAwB,cAAxB,EAAwCC,SAAxC,GAAoD,QAApD;AACAC,MAAAA,UAAU,CAAC,MAAM;AACb,QAAA,KAAI,CAACC,wBAAL,CAA8BR,GAA9B,EAAmCC,GAAnC,EAAwCC,MAAxC,EAAgDnB,aAAhD,EAA+DoB,IAA/D,EAAqEM,SAArE,CAA+EC,IAAI,IAAI;AACnF,cAAIb,KAAK,IAAI,CAAb,EAAgB;AACZ,YAAA,KAAI,CAACT,WAAL,GAAmB,EAAnB;AACH;;AACD,eAAK,IAAIuB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,IAAI,CAACA,IAAL,CAAUE,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;AACvC,gBAAIE,UAAU,GAAG,IAAIzC,UAAJ,EAAjB;AACAyC,YAAAA,UAAU,CAACC,EAAX,GAAgBJ,IAAI,CAACA,IAAL,CAAUC,CAAV,EAAaG,EAA7B;AACAD,YAAAA,UAAU,CAACE,QAAX,GAAsBL,IAAI,CAACA,IAAL,CAAUC,CAAV,EAAaI,QAAnC;AACAF,YAAAA,UAAU,CAACG,IAAX,GAAkBN,IAAI,CAACA,IAAL,CAAUC,CAAV,EAAaK,IAA/B;;AACA,YAAA,KAAI,CAAC5B,WAAL,CAAiB6B,IAAjB,CAAsBJ,UAAtB;AACH;;AACD,cAAIH,IAAI,CAACA,IAAL,CAAUE,MAAV,GAAmBX,GAAnB,IAA0BS,IAAI,CAACA,IAAL,CAAUE,MAAV,IAAoB,CAAlD,EAAqD;AACjD,YAAA,KAAI,CAACzB,WAAL,GAAmB,IAAnB;AACH;;AACD,UAAA,KAAI,CAACD,UAAL,GAAkB,KAAlB;AACH,SAfD;AAgBH,OAjBS,EAiBP,IAjBO,CAAV;AAHkE;AAqBrE;;AACDsB,EAAAA,wBAAwB,CAACR,GAAD,EAAMC,GAAN,EAAWC,MAAX,EAAmBnB,aAAnB,EAAkCoB,IAAlC,EAAwC;AAC5D,UAAMe,GAAG,GAAI,GAAE/C,WAAW,CAACgD,QAAS,uBAAsBnB,GAAI,QAAOC,GAAI,SAAQE,IAAK,WAAUD,MAAO,kBAAiBnB,aAAc,EAAtI;AACA,WAAO,KAAKL,UAAL,CAAgB0C,GAAhB,CAAoBF,GAApB,CAAP;AACH;;AACDG,EAAAA,QAAQ,GAAG;AACP,QAAI,KAAKhC,QAAL,CAAciC,IAAd,GAAqBV,MAArB,GAA8B,CAAlC,EAAqC;AACjC,WAAKW,cAAL,GAAsBd,SAAtB,CAAgCC,IAAI,IAAI;AACpCc,QAAAA,OAAO,CAACC,GAAR,CAAYf,IAAZ;AACA,aAAKgB,oBAAL;AACA,aAAK9B,QAAL,CAAc,CAAd;AACA,aAAKH,kBAAL,GAA0B,KAA1B;AACA,aAAKC,kBAAL,GAA0B,IAA1B;AACA,aAAKf,mBAAL,CAAyBgD,gCAAzB,GAA4D,SAA5D;AACA,aAAKhD,mBAAL,CAAyBiD,gCAAzB,GAA6D,iDAAgD,KAAKrC,MAAO,EAAzH;AACH,OARD;AASH;AACJ;;AACDsC,EAAAA,gBAAgB,CAACC,IAAD,EAAO;AACnB,UAAMZ,GAAG,GAAI,GAAE/C,WAAW,CAACgD,QAAS,YAApC;AACA,WAAO,KAAKzC,UAAL,CAAgBqD,IAAhB,CAAqBb,GAArB,EAA0BY,IAA1B,CAAP;AACH;;AACDP,EAAAA,cAAc,GAAG;AACb,UAAML,GAAG,GAAI,GAAE/C,WAAW,CAACgD,QAAS,YAApC;AACA,QAAIW,IAAI,GAAG;AACPhB,MAAAA,EAAE,EAAE,KAAKvB,MADF;AAEPyB,MAAAA,IAAI,EAAE,KAAK3B,QAFJ;AAGP0B,MAAAA,QAAQ,EAAE,KAAKzB;AAHR,KAAX;AAKA,WAAO,KAAKZ,UAAL,CAAgBsD,GAAhB,CAAoBd,GAApB,EAAyBY,IAAzB,CAAP;AACH;;AACDG,EAAAA,oBAAoB,CAACnB,EAAD,EAAK;AACrB,UAAMI,GAAG,GAAI,GAAE/C,WAAW,CAACgD,QAAS,cAAaL,EAAG,EAApD;AACA,WAAO,KAAKpC,UAAL,CAAgBwD,MAAhB,CAAuBhB,GAAvB,CAAP;AACH;;AACDiB,EAAAA,oBAAoB,GAAG;AACnB,WAAO,KAAKvD,gBAAZ;AACH;;AACDwD,EAAAA,kBAAkB,GAAG;AACjB,SAAKxD,gBAAL,GAAwB,IAAxB;AACH;;AACD8C,EAAAA,oBAAoB,GAAG;AACnB,SAAK9C,gBAAL,GAAwB,KAAxB;AACH;;AACDyD,EAAAA,iBAAiB,GAAG;AAChB,WAAO,KAAKrD,cAAZ;AACH;;AACDe,EAAAA,aAAa,GAAG;AACZ,WAAO,KAAKjB,UAAZ;AACH;;AACDwD,EAAAA,UAAU,CAACC,OAAD,EAAU;AAChB,SAAKzD,UAAL,GAAkByD,OAAlB;AACH;;AAzG8B;;AA2GnC/D,qBAAqB,CAACgE,IAAtB,GAA6B,SAASC,6BAAT,CAAuCC,CAAvC,EAA0C;AAAE,SAAO,KAAKA,CAAC,IAAIlE,qBAAV,EAAiCH,EAAE,CAACsE,QAAH,CAAYrE,EAAE,CAACsE,UAAf,CAAjC,EAA6DvE,EAAE,CAACsE,QAAH,CAAYpE,EAAE,CAACsE,mBAAf,CAA7D,CAAP;AAA2G,CAApL;;AACArE,qBAAqB,CAACsE,KAAtB,GAA8B,aAAczE,EAAE,CAAC0E,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAExE,qBAAT;AAAgCyE,EAAAA,OAAO,EAAEzE,qBAAqB,CAACgE,IAA/D;AAAqEU,EAAAA,UAAU,EAAE;AAAjF,CAAtB,CAA5C","sourcesContent":["import { environment } from './../../../../environments/environment.prod';\r\nimport { Department } from 'src/app/model/department';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/common/http\";\r\nimport * as i2 from \"./../../notification/notification.service\";\r\nexport class DepartmentPageService {\r\n    constructor(httpClient, notificationService) {\r\n        this.httpClient = httpClient;\r\n        this.notificationService = notificationService;\r\n        this.isEditDepartment = false;\r\n        this.inputSearch = \"\";\r\n        this.sortString = \"ASC\";\r\n        this.mainAttribute = \"Name\";\r\n        this.mainAttributes = [\r\n            \"Name\",\r\n        ];\r\n        this.locations = [\r\n            \"HOCHIMINH\",\r\n            \"DANANG\",\r\n            \"CANTHO\",\r\n        ];\r\n        this.isLoadData = false;\r\n        this.isOutOfData = false;\r\n        this.departments = [];\r\n        this.editName = \"\";\r\n        this.editLocation = \"\";\r\n        this.editId = 0;\r\n        this.idDepartmentNeedRemove = 0;\r\n        this.isShowPopupRequest = false;\r\n        this.isShowNotification = false;\r\n        this.isProcessRemove = false;\r\n    }\r\n    loadData(event) {\r\n        this.isOutOfData = false;\r\n        this.departments = [];\r\n        this.getListDepartment(0, 25, this.inputSearch, this.mainAttribute == \"Name\" ? \"name\" : \"location\", this.getSortString() == \"ASC\" ? \"asc\" : \"desc\", event);\r\n    }\r\n    async getListDepartment(min, max, search, mainAttribute, sort, event) {\r\n        this.isLoadData = true;\r\n        document.getElementById(\"content-list\").scrollTop = 99999999;\r\n        setTimeout(() => {\r\n            this.getListDepartmentFromAPI(min, max, search, mainAttribute, sort).subscribe(data => {\r\n                if (event == 1) {\r\n                    this.departments = [];\r\n                }\r\n                for (let i = 0; i < data.data.length; i++) {\r\n                    let department = new Department();\r\n                    department.id = data.data[i].id;\r\n                    department.location = data.data[i].location;\r\n                    department.name = data.data[i].name;\r\n                    this.departments.push(department);\r\n                }\r\n                if (data.data.length < max || data.data.length == 0) {\r\n                    this.isOutOfData = true;\r\n                }\r\n                this.isLoadData = false;\r\n            });\r\n        }, 1000);\r\n    }\r\n    getListDepartmentFromAPI(min, max, search, mainAttribute, sort) {\r\n        const url = `${environment.REST_API}department/part?min=${min}&max=${max}&sort=${sort}&search=${search}&mainAttribute=${mainAttribute}`;\r\n        return this.httpClient.get(url);\r\n    }\r\n    saveItem() {\r\n        if (this.editName.trim().length > 0) {\r\n            this.saveDepartment().subscribe(data => {\r\n                console.log(data);\r\n                this.hiddenEditDepartment();\r\n                this.loadData(0);\r\n                this.isShowPopupRequest = false;\r\n                this.isShowNotification = true;\r\n                this.notificationService.titlePopUpNotificationDepartment = \"Success\";\r\n                this.notificationService.childPopUpNotificationDepartment = `You have successfully updated the department #${this.editId}`;\r\n            });\r\n        }\r\n    }\r\n    addNewDepartment(body) {\r\n        const url = `${environment.REST_API}department`;\r\n        return this.httpClient.post(url, body);\r\n    }\r\n    saveDepartment() {\r\n        const url = `${environment.REST_API}department`;\r\n        let body = {\r\n            id: this.editId,\r\n            name: this.editName,\r\n            location: this.editLocation\r\n        };\r\n        return this.httpClient.put(url, body);\r\n    }\r\n    deleteDepartmentById(id) {\r\n        const url = `${environment.REST_API}department/${id}`;\r\n        return this.httpClient.delete(url);\r\n    }\r\n    isShowEditDepartment() {\r\n        return this.isEditDepartment;\r\n    }\r\n    showEditDepartment() {\r\n        this.isEditDepartment = true;\r\n    }\r\n    hiddenEditDepartment() {\r\n        this.isEditDepartment = false;\r\n    }\r\n    getMainAttributes() {\r\n        return this.mainAttributes;\r\n    }\r\n    getSortString() {\r\n        return this.sortString;\r\n    }\r\n    changeSort(newSort) {\r\n        this.sortString = newSort;\r\n    }\r\n}\r\nDepartmentPageService.ɵfac = function DepartmentPageService_Factory(t) { return new (t || DepartmentPageService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.NotificationService)); };\r\nDepartmentPageService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: DepartmentPageService, factory: DepartmentPageService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}